#####################################################################################################
# Custom Macros below:
#####################################################################################################

###############################################################################
#
#  Mechanical Gantry Calibration
#  
#  Requires TMC2209 drivers with UART control, some tuning and perhaps 
#  some printed endstops.
#
#  Article on my website:
#  https://strayr.github.io/marlin/klipper/2022/08/27/g34.html
#
#  Based on on (depricated) M915 and now alternate G34 from Marlin
#  I beleive Prusa use this, certainly there's older videos advising to just
#  ram the gantry at full current into the the z-max stops.
#
#  It moves the gantry to the top of the travel, drops the current and then
#  does a force move to force the steppers to stall against the physical end
#  stops, transfering the level of the frame to the gantry. 
#
#  This is the only way to programatically level a multi-stepper single-driver 
#  gantry. It may also help with a dual-driver gantry on a bed-slinger design
#  or where the plane of the bed is less trustworthy than the frame.
#
#  It's particularly risky doing Z_TILT_ADJUST and SCREWS_TILT_CALCULATE
#  without a mechanical reference as if one side of the gantry or bed is prone
#  to droop, over time both bed and gantry will skew excessively but still read
#  as level, so this can help transfer "level" from the frame to the gantry and
#  then to the bed.
#
#  I don't recommend doing this in a START_PRINT, I call this if a 
#  SCREWS_TILT_CALCULATE shows some drift, althoughon an Ender 3 type printer
#  it's prudent to check the v-slot rollers for correct adjustment if drift is
#  observed.
#
#  It's probably best to run this and then do SCREWS_TILT_CALCULATE
#  until the bed is really level. IF you have dual Z steppers you can then
#  use Z_TILT_ADJUST for subsequent leveling of the gantry but make sure you
#  use the same points for gantry level as you use in SCREWS_TILT_CALCULATE
#
#  It may damage your printer if you do this at too high a current, or don't
#  have proper endstops.
#  
#            HERE BE DRAGONS!
#            YOU WERE WARNED!
#
#  Here's a video of this in action
#  https://www.youtube.com/watch?v=aVdIeIIpUAk
#  and the endstops for 2020 v-slot
#  https://github.com/strayr/small-fff-projects/tree/main/Z_endstops


[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
    ### SET THIS DEFAULT CARFULLY - start really low
    {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current on the fly :D
    ###
    {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %} ; TODO: Find runtime current settings
    {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    {% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
    {% set fast_move = printer.configfile.settings["printer"].max_velocity %}
    M117 {printer.homed_axes}
    {% if printer.homed_axes != 'xyz' %}
        G28							#Home All Axes
    {% endif %}
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 } ;put toolhead in the center of the gantry

    G0 Z{z_max -1} F{fast_move_z * 60 } ; go to the Z-max at speed max z speed
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current} ; drop current on Z stepper
    
    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current} ; drop current
    {% endif %}

    G4 P200 ; Probably not necessary, it is here just for sure

    SET_KINEMATIC_POSITION Z={z_max - 12} ; Trick printer into beleiving the gantry is 12mm lower than it is

    G1 Z{z_max -2} F{6 * 60} ; try to move 10mm up
    G4 P200 ; wait
    G1 Z{z_max -6} F{6 * 60} ; move 4mm down
    G4 P200 ; same as the first one
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}

    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold} ; reset current
    {% endif %}

    G1 Z{z_max -30} F{6 * 60} ; move to 30mm below z-max to allow homing movement

    G4 P200 ; same as the first one
    G28 Z ; we MUST home again as the ganty is really in the wrong place.

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

#####################################################################################################
# Start Print
#####################################################################################################
[gcode_macro START_PRINT]
gcode:
    G28; Home all
    BED_MESH_CALIBRATE ADAPTIVE=1  
    BED_MESH_PROFILE LOAD=default #Load default bed mesh
    SET_GCODE_OFFSET Z=0.0 #Reset the G-Code Z offset (adjust Z offset if needed)
    G92 E0; Reset Extruder
    G1 X0 Y0 Z0.2 F3000 ; Get ready to prime
    G1 Z5.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5.1 Y20 Z0.3 F5000.0; Move to start position
    G1 X5.1 Y200.0 Z0.3 F1500.0 E15; Draw the first line
    G1 X5.4 Y200.0 Z0.3 F5000.0; Move to side a little
    G1 X5.4 Y20 Z0.3 F1500.0 E30; Draw the second line
    G92 E0; Reset Extruder
    G1 Z5.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed

#####################################################################################################
# End Print
#####################################################################################################
[gcode_macro END_PRINT]
gcode: 
    G91 ;Relative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z10 ;Raise Z more
    G90 ;Absolute positionning
    G1 X0 Y235 ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    M84 X Y E ;Disable all steppers but Z

#####################################################################################################
# G-Code Macros below:
#####################################################################################################

###############################Eddy Macros################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[save_variables]
filename: ~/printer_data/config/variables.cfg

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}

# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }

# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %}
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }

# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BTT_BED_MESH_CALIBRATE
#gcode:
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
#  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg

####################################

#Z Tilt Adjust
[gcode_macro Z_Tilt]
gcode:
    Z_TILT_ADJUST

#Screw Tilt Calculate
[gcode_macro LEVEL_BED]
gcode:
    SCREWS_TILT_CALCULATE

#Probe Calculate
[gcode_macro Probe_Calculate]
gcode:
    PROBE_CALIBRATE

## Mainsail klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license

## Version 2.0

## add [include mainsail.cfg] to your printer.cfg

## Customization:
## copy the following macro to your printer.cfg (outside of mainsail.cfg)

#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos  : False ; use custom park coordinates for x,y [True/False] 
#variable_custom_park_x   : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y   : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz  : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
#variable_retract         : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract   : 35.0  ; retract speed in mm/s
#variable_unretract       : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract : 35.0  ; unretract speed in mm/s
#variable_speed_hop       : 15.0  ; z move speed in mm/s
#variable_speed_move      : 100.0 ; move speed in mm/s
#variable_park_at_cancel  : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
#gcode:

## After you uncomment it add your custom values

## You now can use your PAUSE macro direct in your M600 here a short example:

#[gcode_macro M600]
#description: Filament change
#gcode: PAUSE X=10 Y=10 Z_MIN=50

## That will park your head front left with a minimum hight of 50mm above the bed. If your head
## is already above 50mm it will use only the z_hop specified with dz.

# Speaker
[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
    {% set F = 1 %}
    {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
    {% set F = 0 %}
    {% else %}
    {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN=beeper VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=beeper VALUE=0

# Bed Mesh Sequence
[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X0 Y0 Z10 F6000
    SAVE_CONFIG

[gcode_macro SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}

[gcode_macro REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}
  
[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set allow_park = False if printer['gcode_macro _CLIENT_VARIABLE'] is not defined
                 else False if printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel is not defined
                 else True  if printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel|lower == 'true' 
                 else False %}
  {% set retract      = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
  {% set sp_retract   = 2100 if not macro_found else client.speed_retract|default(35) * 60 %}
  ##### end of definitions #####
  {% if not printer.pause_resume.is_paused and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}
  {% if printer.extruder.can_extrude %}
    M83
    G1 E-{retract} F{sp_retract}
    {% if printer.gcode_move.absolute_extrude %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  TURN_OFF_HEATERS
  M106 S0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %} 
  {% set unretract      = 1.0  if not macro_found else client.unretract|default(1.0)|abs %}
  {% set sp_unretract   = 2100 if not macro_found else client.speed_unretract|default(35) * 60 %}
  {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      G11
    {% else %}
      M83
      G1 E{unretract} F{sp_unretract}
      {% if printer.gcode_move.absolute_extrude %} M82 {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough %s" % use_fw_retract)}
  {% endif %}  
  RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}  

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = False if not macro_found
                     else False if client.use_custom_pos is not defined
                     else True  if client.use_custom_pos|lower == 'true' 
                     else False %}
  {% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
  {% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}
  {% set retract      = 1.0  if not macro_found else client.retract|default(1.0)|abs %}
  {% set sp_retract   = 2100 if not macro_found else client.speed_retract|default(35) * 60 %}
  {% set sp_hop       = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
  {% set sp_move      = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set act = printer.toolhead.position %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cone = printer.toolhead.cone_start_z|default(max.z) %} ; hight as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch'] 
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, max.z]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed 
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      G10
    {% else %}
      M83
      G1 E-{retract} F{sp_retract}
      {% if printer.gcode_move.absolute_extrude %} M82 {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}